import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../models/user_model.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<DocumentSnapshot?> getUserByEmail(String email) async {
    try {
      final normalizedEmail = email.trim().toLowerCase();
      print("üîç T√¨m email: $normalizedEmail");

      final querySnapshot = await FirebaseFirestore.instance
          .collection('users')
          .where('email', isEqualTo: normalizedEmail)
          .limit(1)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        print("‚úÖ T√¨m th·∫•y user: ${querySnapshot.docs.first.id}");
        return querySnapshot.docs.first;
      } else {
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi email: $normalizedEmail");
        return null;
      }
    } catch (e) {
      print("‚ùå L·ªói khi t√¨m user theo email: $e");
      return null;
    }
  }

  Future<void> printAllUserEmails() async {
    final querySnapshot = await FirebaseFirestore.instance.collection('users')
        .get();
    for (var doc in querySnapshot.docs) {
      print("üìß User email: ${doc.get('email')}");
    }
  }

  // ƒêƒÉng k√Ω t√†i kho·∫£n v√† l∆∞u v√†o Firestore
  Future<String?> signUpWithEmail(String fullName,
      String email,
      String password,) async {
    try {
      UserCredential userCredential = await _auth
          .createUserWithEmailAndPassword(email: email, password: password);

      User? user = userCredential.user;
      if (user != null) {
        await user.updateDisplayName(fullName);
        await user.reload();

        // D√πng model ƒë·ªÉ l∆∞u d·ªØ li·ªáu v√†o Firestore
        UserModel newUser = UserModel(
          uid: user.uid,
          fullName: fullName,
          email: email.trim().toLowerCase(), // üëà B·∫Øt bu·ªôc chu·∫©n h√≥a khi l∆∞u
          createdAt: DateTime.now(),
        );

        await _firestore
            .collection("users")
            .doc(user.uid)
            .set(newUser.toJson());

        return "ƒêƒÉng k√Ω th√†nh c√¥ng";
      }
      return "Kh√¥ng th·ªÉ ƒëƒÉng k√Ω, vui l√≤ng th·ª≠ l·∫°i!";
    } on FirebaseAuthException catch (e) {
      return e.message; // L·ªói Firebase
    } catch (e) {
      return "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!";
    }
  }


  // L·∫•y th√¥ng tin user t·ª´ Firestore
  Future<UserModel?> getUserData(String uid) async {
    try {
      DocumentSnapshot userDoc =
      await _firestore.collection("users").doc(uid).get();
      if (userDoc.exists) {
        return UserModel.fromJson(userDoc.data() as Map<String, dynamic>);
      }
      return null;
    } catch (e) {
      print("L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng: $e");
      return null;
    }
  }

  Future<String?> signInWithEmail(String email, String password) async {
    try {
      print("üì© ƒêƒÉng nh·∫≠p v·ªõi Email: $email");

      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: ${userCredential.user?.email}");
      return "ƒêƒÉng nh·∫≠p th√†nh c√¥ng";
    } on FirebaseAuthException catch (e) {
      print("‚ùå L·ªói Firebase: ${e.code} - ${e.message}");
      return e.message;
    } catch (e) {
      print("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: $e");
      return "C√≥ l·ªói x·∫£y ra!";
    }
  }

  // ƒêƒÉng xu·∫•t
  Future<void> signOut() async {
    await _auth.signOut();
  }

// Future<String?> _getDisplayName() async {
//   final user = FirebaseAuth.instance.currentUser;
//   return user?.displayName;
// }

//   Future<Stream<String>> getCurrentUserName() async {
//     final user = FirebaseAuth.instance.currentUser;
//     if (user != null) {
//       final userData = await AuthService().getUserData(user.uid);
//       return userData?.fullName ?? "Ng∆∞·ªùi d√πng";
//     }
//     return "Kh√°ch";
//     }
// //
// }

  Stream<String> getCurrentUserName() {
    final user = _auth.currentUser;
    if (user != null) {
      return _firestore
          .collection('users')
          .doc(user.uid)
          .snapshots()
          .map((snapshot) {
        if (snapshot.exists) {
          return snapshot.data()?['fullName'] ?? 'Ng∆∞·ªùi d√πng';
        } else {
          return 'Ng∆∞·ªùi d√πng';
        }
      });
    } else {
      // N·∫øu user null th√¨ tr·∫£ stream c√≥ 1 gi√° tr·ªã m·∫∑c ƒë·ªãnh
      return Stream.value('Ng∆∞·ªùi d√πng');
    }
  }

  Future<bool> verifyOldPassword(String oldPassword) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return false;

      // T·∫°o credential t·ª´ email v√† m·∫≠t kh·∫©u c≈©
      AuthCredential credential = EmailAuthProvider.credential(
        email: user.email!,
        password: oldPassword,
      );

      // Reauthenticate user
      await user.reauthenticateWithCredential(credential);

      return true; // N·∫øu kh√¥ng l·ªói, t·ª©c l√† m·∫≠t kh·∫©u c≈© ƒë√∫ng
    } catch (e) {
      return false; // N·∫øu l·ªói, m·∫≠t kh·∫©u c≈© sai
    }
  }

  Future<void> changePassword(String newPassword) async {
    try {
      final user = _auth.currentUser;
      if (user != null) {
        await user.updatePassword(newPassword);
      }
    } catch (e) {
      throw Exception('Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u: $e');
    }
  }


}
